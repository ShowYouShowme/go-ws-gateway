// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.5
// source: cmd_net.proto

package protocol

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MainCmdID int32

const (
	MainCmdID_SYS      MainCmdID = 0 //系统类
	MainCmdID_GAME     MainCmdID = 1 //游戏类
	MainCmdID_LOBBY    MainCmdID = 2 //大厅类
	MainCmdID_ACCOUNTS MainCmdID = 3 //登陆类
)

// Enum value maps for MainCmdID.
var (
	MainCmdID_name = map[int32]string{
		0: "SYS",
		1: "GAME",
		2: "LOBBY",
		3: "ACCOUNTS",
	}
	MainCmdID_value = map[string]int32{
		"SYS":      0,
		"GAME":     1,
		"LOBBY":    2,
		"ACCOUNTS": 3,
	}
)

func (x MainCmdID) Enum() *MainCmdID {
	p := new(MainCmdID)
	*p = x
	return p
}

func (x MainCmdID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MainCmdID) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_net_proto_enumTypes[0].Descriptor()
}

func (MainCmdID) Type() protoreflect.EnumType {
	return &file_cmd_net_proto_enumTypes[0]
}

func (x MainCmdID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MainCmdID.Descriptor instead.
func (MainCmdID) EnumDescriptor() ([]byte, []int) {
	return file_cmd_net_proto_rawDescGZIP(), []int{0}
}

type SubCmdID int32

const (
	// 系统协议
	SubCmdID_SYS_SOFTINFO         SubCmdID = 0  //系统软件相关信息，客户端连接后第一条协议主动告知服务器（不需要等待结果)
	SubCmdID_SYS_HEART_ASK        SubCmdID = 1  //心跳请求
	SubCmdID_SYS_HEART_ACK        SubCmdID = 2  //心跳应答
	SubCmdID_SYS_BOMB_MSG         SubCmdID = 3  //系统强弹消息--服务器主动推送
	SubCmdID_SYS_USER_STATUS      SubCmdID = 4  //用户在房间状态
	SubCmdID_SYS_COMM_MSG         SubCmdID = 6  //系统通用消息--服务器主动推送
	SubCmdID_SYS_UPDATE_USER_GOLD SubCmdID = 7  //更新用户金币
	SubCmdID_SYS_TEST_SPEED_REQ   SubCmdID = 9  //测速协议 用户在房间内上传
	SubCmdID_SYS_TEST_SPEED_RESP  SubCmdID = 10 // 测速协议 收到CMD_SYS_TEST_SPEED_REQ且用户在房间内返回
	// 登录协议
	SubCmdID_ACCOUNTS_TOKEN_LOGON_REQ       SubCmdID = 11 //token登录（上行）cmd_lobby.xml -> CTokenLogonReq" />
	SubCmdID_ACCOUNTS_LOGON_FAIL_RESP       SubCmdID = 12 //登录请求失败（下行）cmd_lobby.xml->CLogonFailResp" />
	SubCmdID_ACCOUNTS_LOGON_SUCCESS_RESP    SubCmdID = 13 //登录请求成功（下行）cmd_lobby.xml->CLogonSuccessResp" />
	SubCmdID_ACCOUNTS_FIRST_LOGON_GIFT_RESP SubCmdID = 14 //下行新手奖励 （下行）cmd_lobby.xml->CFirstLogonGiftResp"/>
	SubCmdID_ACCOUNTS_QUICKLY_LOGON_REQ     SubCmdID = 15 //游客登录（上行）" />
	SubCmdID_ACCOUNTS_THIRD_LOGON_REQ       SubCmdID = 16 //第三方登录（上行）cmd_lobby.xml -> CThirdLogonReq"   />
	SubCmdID_ACCOUNTS_MODIFY_USERINFO_REQ   SubCmdID = 17 //修改用户信息（上行）cmd_lobby.xml ->CModifyUserInfoReq"   />
	SubCmdID_ACCOUNTS_MODIFY_USERINFO_RESP  SubCmdID = 18 //修改用户信息（下行）cmd_lobby.xml ->CModifyUserInfoResp"   />
)

// Enum value maps for SubCmdID.
var (
	SubCmdID_name = map[int32]string{
		0:  "SYS_SOFTINFO",
		1:  "SYS_HEART_ASK",
		2:  "SYS_HEART_ACK",
		3:  "SYS_BOMB_MSG",
		4:  "SYS_USER_STATUS",
		6:  "SYS_COMM_MSG",
		7:  "SYS_UPDATE_USER_GOLD",
		9:  "SYS_TEST_SPEED_REQ",
		10: "SYS_TEST_SPEED_RESP",
		11: "ACCOUNTS_TOKEN_LOGON_REQ",
		12: "ACCOUNTS_LOGON_FAIL_RESP",
		13: "ACCOUNTS_LOGON_SUCCESS_RESP",
		14: "ACCOUNTS_FIRST_LOGON_GIFT_RESP",
		15: "ACCOUNTS_QUICKLY_LOGON_REQ",
		16: "ACCOUNTS_THIRD_LOGON_REQ",
		17: "ACCOUNTS_MODIFY_USERINFO_REQ",
		18: "ACCOUNTS_MODIFY_USERINFO_RESP",
	}
	SubCmdID_value = map[string]int32{
		"SYS_SOFTINFO":                   0,
		"SYS_HEART_ASK":                  1,
		"SYS_HEART_ACK":                  2,
		"SYS_BOMB_MSG":                   3,
		"SYS_USER_STATUS":                4,
		"SYS_COMM_MSG":                   6,
		"SYS_UPDATE_USER_GOLD":           7,
		"SYS_TEST_SPEED_REQ":             9,
		"SYS_TEST_SPEED_RESP":            10,
		"ACCOUNTS_TOKEN_LOGON_REQ":       11,
		"ACCOUNTS_LOGON_FAIL_RESP":       12,
		"ACCOUNTS_LOGON_SUCCESS_RESP":    13,
		"ACCOUNTS_FIRST_LOGON_GIFT_RESP": 14,
		"ACCOUNTS_QUICKLY_LOGON_REQ":     15,
		"ACCOUNTS_THIRD_LOGON_REQ":       16,
		"ACCOUNTS_MODIFY_USERINFO_REQ":   17,
		"ACCOUNTS_MODIFY_USERINFO_RESP":  18,
	}
)

func (x SubCmdID) Enum() *SubCmdID {
	p := new(SubCmdID)
	*p = x
	return p
}

func (x SubCmdID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubCmdID) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_net_proto_enumTypes[1].Descriptor()
}

func (SubCmdID) Type() protoreflect.EnumType {
	return &file_cmd_net_proto_enumTypes[1]
}

func (x SubCmdID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubCmdID.Descriptor instead.
func (SubCmdID) EnumDescriptor() ([]byte, []int) {
	return file_cmd_net_proto_rawDescGZIP(), []int{1}
}

type TPackage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MainCmd MainCmdID `protobuf:"varint,1,opt,name=MainCmd,proto3,enum=protocol.MainCmdID" json:"MainCmd,omitempty"`
	SubCmd  SubCmdID  `protobuf:"varint,2,opt,name=SubCmd,proto3,enum=protocol.SubCmdID" json:"SubCmd,omitempty"`
	Data    []byte    `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *TPackage) Reset() {
	*x = TPackage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_net_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TPackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPackage) ProtoMessage() {}

func (x *TPackage) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_net_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPackage.ProtoReflect.Descriptor instead.
func (*TPackage) Descriptor() ([]byte, []int) {
	return file_cmd_net_proto_rawDescGZIP(), []int{0}
}

func (x *TPackage) GetMainCmd() MainCmdID {
	if x != nil {
		return x.MainCmd
	}
	return MainCmdID_SYS
}

func (x *TPackage) GetSubCmd() SubCmdID {
	if x != nil {
		return x.SubCmd
	}
	return SubCmdID_SYS_SOFTINFO
}

func (x *TPackage) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type CTokenLogonReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token  string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	GameID int32  `protobuf:"varint,2,opt,name=GameID,proto3" json:"GameID,omitempty"`
}

func (x *CTokenLogonReq) Reset() {
	*x = CTokenLogonReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_net_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTokenLogonReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTokenLogonReq) ProtoMessage() {}

func (x *CTokenLogonReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_net_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTokenLogonReq.ProtoReflect.Descriptor instead.
func (*CTokenLogonReq) Descriptor() ([]byte, []int) {
	return file_cmd_net_proto_rawDescGZIP(), []int{1}
}

func (x *CTokenLogonReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *CTokenLogonReq) GetGameID() int32 {
	if x != nil {
		return x.GameID
	}
	return 0
}

type CLogonFailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode int32  `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Msg       string `protobuf:"bytes,2,opt,name=Msg,proto3" json:"Msg,omitempty"`
}

func (x *CLogonFailResp) Reset() {
	*x = CLogonFailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_net_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CLogonFailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CLogonFailResp) ProtoMessage() {}

func (x *CLogonFailResp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_net_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CLogonFailResp.ProtoReflect.Descriptor instead.
func (*CLogonFailResp) Descriptor() ([]byte, []int) {
	return file_cmd_net_proto_rawDescGZIP(), []int{2}
}

func (x *CLogonFailResp) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *CLogonFailResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type CLogonSuccessResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID   int32  `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Token    string `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
	NickName string `protobuf:"bytes,3,opt,name=NickName,proto3" json:"NickName,omitempty"`
	Gold     int32  `protobuf:"varint,4,opt,name=Gold,proto3" json:"Gold,omitempty"`
	Avatar   string `protobuf:"bytes,5,opt,name=Avatar,proto3" json:"Avatar,omitempty"`
}

func (x *CLogonSuccessResp) Reset() {
	*x = CLogonSuccessResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_net_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CLogonSuccessResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CLogonSuccessResp) ProtoMessage() {}

func (x *CLogonSuccessResp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_net_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CLogonSuccessResp.ProtoReflect.Descriptor instead.
func (*CLogonSuccessResp) Descriptor() ([]byte, []int) {
	return file_cmd_net_proto_rawDescGZIP(), []int{3}
}

func (x *CLogonSuccessResp) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *CLogonSuccessResp) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *CLogonSuccessResp) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *CLogonSuccessResp) GetGold() int32 {
	if x != nil {
		return x.Gold
	}
	return 0
}

func (x *CLogonSuccessResp) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

var File_cmd_net_proto protoreflect.FileDescriptor

var file_cmd_net_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x6d, 0x64, 0x5f, 0x6e, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x79, 0x0a, 0x08, 0x54, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x6d, 0x64, 0x49, 0x44, 0x52, 0x07, 0x4d, 0x61, 0x69,
	0x6e, 0x43, 0x6d, 0x64, 0x12, 0x2a, 0x0a, 0x06, 0x53, 0x75, 0x62, 0x43, 0x6d, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x53, 0x75, 0x62, 0x43, 0x6d, 0x64, 0x49, 0x44, 0x52, 0x06, 0x53, 0x75, 0x62, 0x43, 0x6d, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x3e, 0x0a, 0x0e, 0x43, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x6f,
	0x67, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x47, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x47, 0x61,
	0x6d, 0x65, 0x49, 0x44, 0x22, 0x40, 0x0a, 0x0e, 0x43, 0x4c, 0x6f, 0x67, 0x6f, 0x6e, 0x46, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x4d, 0x73, 0x67, 0x22, 0x89, 0x01, 0x0a, 0x11, 0x43, 0x4c, 0x6f, 0x67, 0x6f,
	0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69,
	0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x69,
	0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x47, 0x6f, 0x6c, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x2a, 0x37, 0x0a, 0x09, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x6d, 0x64, 0x49, 0x44, 0x12,
	0x07, 0x0a, 0x03, 0x53, 0x59, 0x53, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x41, 0x4d, 0x45,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x4f, 0x42, 0x42, 0x59, 0x10, 0x02, 0x12, 0x0c, 0x0a,
	0x08, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x53, 0x10, 0x03, 0x2a, 0xca, 0x03, 0x0a, 0x08,
	0x53, 0x75, 0x62, 0x43, 0x6d, 0x64, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x59, 0x53, 0x5f,
	0x53, 0x4f, 0x46, 0x54, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x59,
	0x53, 0x5f, 0x48, 0x45, 0x41, 0x52, 0x54, 0x5f, 0x41, 0x53, 0x4b, 0x10, 0x01, 0x12, 0x11, 0x0a,
	0x0d, 0x53, 0x59, 0x53, 0x5f, 0x48, 0x45, 0x41, 0x52, 0x54, 0x5f, 0x41, 0x43, 0x4b, 0x10, 0x02,
	0x12, 0x10, 0x0a, 0x0c, 0x53, 0x59, 0x53, 0x5f, 0x42, 0x4f, 0x4d, 0x42, 0x5f, 0x4d, 0x53, 0x47,
	0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x59, 0x53, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x59, 0x53, 0x5f, 0x43,
	0x4f, 0x4d, 0x4d, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x59, 0x53,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x4f, 0x4c,
	0x44, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x59, 0x53, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x5f,
	0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x09, 0x12, 0x17, 0x0a, 0x13, 0x53,
	0x59, 0x53, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x52, 0x45,
	0x53, 0x50, 0x10, 0x0a, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x53,
	0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51,
	0x10, 0x0b, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x53, 0x5f, 0x4c,
	0x4f, 0x47, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x0c,
	0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x53, 0x5f, 0x4c, 0x4f, 0x47,
	0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10,
	0x0d, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x53, 0x5f, 0x46, 0x49,
	0x52, 0x53, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x4e, 0x5f, 0x47, 0x49, 0x46, 0x54, 0x5f, 0x52,
	0x45, 0x53, 0x50, 0x10, 0x0e, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x53, 0x5f, 0x51, 0x55, 0x49, 0x43, 0x4b, 0x4c, 0x59, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x4e, 0x5f,
	0x52, 0x45, 0x51, 0x10, 0x0f, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x53, 0x5f, 0x54, 0x48, 0x49, 0x52, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x51, 0x10, 0x10, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x53, 0x5f,
	0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x49, 0x4e, 0x46, 0x4f, 0x5f,
	0x52, 0x45, 0x51, 0x10, 0x11, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x49, 0x4e, 0x46,
	0x4f, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x12, 0x42, 0x0d, 0x5a, 0x0b, 0x2e, 0x2f, 0x3b, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cmd_net_proto_rawDescOnce sync.Once
	file_cmd_net_proto_rawDescData = file_cmd_net_proto_rawDesc
)

func file_cmd_net_proto_rawDescGZIP() []byte {
	file_cmd_net_proto_rawDescOnce.Do(func() {
		file_cmd_net_proto_rawDescData = protoimpl.X.CompressGZIP(file_cmd_net_proto_rawDescData)
	})
	return file_cmd_net_proto_rawDescData
}

var file_cmd_net_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_cmd_net_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_cmd_net_proto_goTypes = []interface{}{
	(MainCmdID)(0),            // 0: protocol.MainCmdID
	(SubCmdID)(0),             // 1: protocol.SubCmdID
	(*TPackage)(nil),          // 2: protocol.TPackage
	(*CTokenLogonReq)(nil),    // 3: protocol.CTokenLogonReq
	(*CLogonFailResp)(nil),    // 4: protocol.CLogonFailResp
	(*CLogonSuccessResp)(nil), // 5: protocol.CLogonSuccessResp
}
var file_cmd_net_proto_depIdxs = []int32{
	0, // 0: protocol.TPackage.MainCmd:type_name -> protocol.MainCmdID
	1, // 1: protocol.TPackage.SubCmd:type_name -> protocol.SubCmdID
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_cmd_net_proto_init() }
func file_cmd_net_proto_init() {
	if File_cmd_net_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cmd_net_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TPackage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_net_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTokenLogonReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_net_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CLogonFailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_net_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CLogonSuccessResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cmd_net_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cmd_net_proto_goTypes,
		DependencyIndexes: file_cmd_net_proto_depIdxs,
		EnumInfos:         file_cmd_net_proto_enumTypes,
		MessageInfos:      file_cmd_net_proto_msgTypes,
	}.Build()
	File_cmd_net_proto = out.File
	file_cmd_net_proto_rawDesc = nil
	file_cmd_net_proto_goTypes = nil
	file_cmd_net_proto_depIdxs = nil
}
